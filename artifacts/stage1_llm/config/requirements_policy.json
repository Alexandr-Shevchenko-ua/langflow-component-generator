{
  "filename": "python_exec_policy.py",
  "language": "python",
  "code_lines": [
    "# Policy for a PythonExec component that runs short code with timeout and captures stdout/stderr",
    "policy = {",
    "    \"min_counts\": {\"inputs\": 2, \"outputs\": 2, \"constraints\": 2, \"non_functional\": 2, \"acceptance_criteria\": 3, \"risks\": 2, \"assumptions\": 1, \"open_questions\": 1},",
    "    \"banned_tokens\": [\"tbd\", \"placeholder\", \"todo\", \"hack\", \"rm -rf\", \"sudo\", \"passwd\", \"ssh\", \"curl\", \"wget\"],",
    "    \"prompt\": {",
    "        \"system\": \"You are a senior requirements engineer producing a concise, implementable policy for a PythonExec component that runs short code with a timeout and returns stdout and stderr.\",",
    "        \"format_rules\": [",
    "            \"MUST provide at least the minimum counts specified in min_counts for each section.\",",
    "            \"MUST list explicit inputs and outputs with clear types and short descriptions; inputs should include the code payload and a timeout control.\",",
    "            \"MUST include constraints that address execution timeout, resource limits, and sandboxing; avoid advising disabling protections.\",",
    "            \"MUST make acceptance criteria testable and observable in terms of stdout, stderr, exit code, and timeout behavior.\",",
    "            \"MUST call out security and safety risks and include assumptions about isolated execution environments.\",",
    "            \"MUST use unambiguous, implementation-ready language and avoid operational deployment instructions unrelated to the component's interface.\"",
    "        ],",
    "        \"example_shape\": \"{\\\"inputs\\\":[{\\\"name\\\":\\\"script\\\",\\\"type\\\":\\\"string\\\"}],\\\"outputs\\\":[{\\\"name\\\":\\\"stdout\\\",\\\"type\\\":\\\"string\\\"}],\\\"constraints\\\":[\\\"timeout\\\"],\\\"acceptance_criteria\\\":[\\\"observable output\\\"]}\"",
    "    },",
    "    \"fallback_defaults\": {",
    "        \"context\": \"This policy targets a small execution component that runs brief Python snippets under an enforced timeout and returns captured stdout and stderr. It assumes execution occurs in an isolated sandbox with limits.\",",
    "        \"inputs_extra\": [",
    "            {\"name\": \"code\", \"type\": \"string\", \"required\": true, \"description\": \"The Python source to execute (short snippets only).\"},",
    "            {\"name\": \"timeout_seconds\", \"type\": \"number\", \"required\": true, \"description\": \"Maximum wall-clock seconds to allow the execution.\"}",
    "        ],",
    "        \"outputs_extra\": [",
    "            {\"name\": \"stdout\", \"type\": \"string\", \"description\": \"Captured standard output.\"},",
    "            {\"name\": \"stderr\", \"type\": \"string\", \"description\": \"Captured standard error.\"},",
    "            {\"name\": \"exit_code\", \"type\": \"integer\", \"description\": \"Process exit code or a special code for timeout.\"},",
    "            {\"name\": \"duration_ms\", \"type\": \"integer\", \"description\": \"Measured execution time in milliseconds.\"}",
    "        ],",
    "        \"constraints\": [",
    "            \"Enforce a configurable execution timeout and hard memory limits.\",",
    "            \"Disallow network, external process spawning, and persistent filesystem writes by default.\",",
    "            \"Require input size limits and output truncation policies to prevent abuse.\"",
    "        ],",
    "        \"non_functional\": [",
    "            \"Fast startup suitable for short snippets.\",",
    "            \"Deterministic handling of identical inputs when sandboxed and resources are stable.\",",
    "            \"Low resource overhead and predictable latency under normal load.\"",
    "        ],",
    "        \"acceptance_criteria\": [",
    "            \"A script that writes to stdout returns the exact stdout string, empty stderr, and exit_code zero within timeout.\",",
    "            \"A script that raises an error yields populated stderr, a nonzero exit_code, and no uncontrolled side effects beyond sandboxed state.\",",
    "            \"A script exceeding timeout is terminated, marked as timed out, and returns no further stdout beyond any captured buffer.\"",
    "        ],",
    "        \"risks\": [",
    "            \"Code injection and malicious payloads attempting data exfiltration or privilege escalation.\",",
    "            \"Resource exhaustion from loops or large memory allocations leading to denial of service.\"",
    "        ],",
    "        \"assumptions\": [",
    "            \"Execution is performed inside a sandbox or container with kernel-level enforcement of resource limits and no privileged access.\"",
    "        ],",
    "        \"open_questions\": [",
    "            \"Should the component expose configurable resource limits or rely solely on platform defaults?\"",
    "        ]",
    "    }",
    "}"
  ],
  "prompt": {
    "example_shape": "{\"raw_spec\":\"...\",\"purpose\":\"...\",\"context\":\"...\",\"inputs\":[{\"name\":\"...\",\"type\":\"...\",\"required\":true,\"description\":\"...\"}],\"outputs\":[{\"name\":\"...\",\"type\":\"...\",\"description\":\"...\"}],\"constraints\":[\"...\"],\"non_functional\":[\"...\"],\"acceptance_criteria\":[\"...\"],\"risks\":[\"...\"],\"assumptions\":[\"...\"],\"open_questions\":[\"...\"]}"
  },
  "min_counts": {},
  "banned_tokens": [],
  "fallback_defaults": {}
}